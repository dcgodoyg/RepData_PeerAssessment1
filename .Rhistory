scale_colour_manual(values=c("#0072B2", "#D55E00")) +
theme_minimal()
ggplot(datos, aes(x=numero, y=fx, color=tipo)) +
geom_line(size=1) +
scale_colour_manual(values=c("#002A48", "#D55E00")) +
theme_minimal()
ggplot(datos, aes(x=numero, y=fx, color=tipo)) +
geom_line(size=1) +
scale_colour_manual(values=c("#002A48", "#c93600")) +
theme_minimal()
ggplot(datos, aes(x=numero, y=fx, color=tipo)) +
geom_line(size=1) +
scale_colour_manual(values=c("#002A48", "#701E00")) +
theme_minimal()
ggplot(datos, aes(x=numero, y=fx, color=tipo)) +
geom_line(size=1) +
scale_colour_manual(values=c("#002A48", "#C93600")) +
theme_minimal()
ggplot(datos, aes(x=numero, y=fx, color=tipo)) +
geom_line(size=1) +
scale_colour_brewer(palette="set1") +
theme_minimal()
ggplot(datos, aes(x=numero, y=fx, color=tipo)) +
geom_line(size=1) +
scale_colour_brewer(palette="Set1") +
theme_minimal()
ggplot(datos, aes(x=numero, y=fx, color=tipo)) +
geom_line(size=1) +
scale_colour_brewer(palette="Dark2") +
theme_minimal()
ggplot(datos, aes(x=numero, y=fx, color=tipo)) +
geom_line(size=1) +
scale_colour_brewer(palette="Accent") +
theme_minimal()
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(datos, aes(x=numero, y=fx, color=tipo)) +
geom_line(size=1) +
scale_colour_manual(values=cbbPalette) +
theme_minimal()
cbbPalette <- c("#000000", "#D55E00", "#56B4E9", "#009E73", "#F0E442",
"#0072B2", "#E69F00", "#CC79A7")
ggplot(datos, aes(x=numero, y=fx, color=tipo)) +
geom_line(size=1) +
scale_colour_manual(values=cbbPalette) +
theme_minimal()
cbbPalette <- c("#0072B2", "#D55E00", "#56B4E9", "#009E73", "#F0E442",
"#000000", "#E69F00", "#CC79A7")
ggplot(datos, aes(x=numero, y=fx, color=tipo)) +
geom_line(size=1) +
scale_colour_manual(values=cbbPalette) +
theme_minimal()
cbbPalette <- c("#000B75", "#D55E00", "#56B4E9", "#009E73", "#F0E442",
"#000000", "#E69F00", "#CC79A7")
ggplot(datos, aes(x=numero, y=fx, color=tipo)) +
geom_line(size=1) +
scale_colour_manual(values=cbbPalette) +
theme_minimal()
cbbPalette <- c("#00436A", "#D55E00", "#56B4E9", "#009E73", "#F0E442",
"#000000", "#E69F00", "#CC79A7")
ggplot(datos, aes(x=numero, y=fx, color=tipo)) +
geom_line(size=1) +
scale_colour_manual(values=cbbPalette) +
theme_minimal()
png(filename = "plot1biasvariance.png", width = 560, height = 480, units = "px",
bg = "white")
ggplot(datos, aes(x=numero, y=fx, color=tipo)) +
geom_line(size=1) +
scale_colour_manual(values=cbbPalette) +
theme_minimal()
dev.off()
ggplot(datos, aes(x=numero, y=fx, color=tipo)) +
geom_line(size=1) +
scale_colour_manual(values=cbbPalette) +
theme_minimal()
png(filename = "plot1biasvariance.png", width = 560, height = 480, units = "px",
bg = "white")
ggplot(datos, aes(x=numero, y=fx, color=tipo)) +
geom_line(size=1) +
scale_colour_manual(values=cbbPalette) +
theme_minimal()
dev.off()
getwd()
library(fBasics)
library(evir)
data(siemens)
SieDates <- as.character(format(as.POSIXct(attr(siemens, "times")),
"%Y-%m-%d"))
SieRet <- timeSeries(siemens * 100, charvec = SieDates)
colnames(SieRet) <- "SieRet"
par(mfrow=c(2,2))
seriesPlot(SieRet, title = FALSE, main = "Daily Returns of Siemens",
col = "blue")
boxPlot(SieRet, title=FALSE, main = "Box plot of Returns",
col = "blue", cex= 0.5, pch = 19)
acf(SieRet, main = "ACF of Returns", lag.max = 20, ylab = " ",
xlab = " ", col = "blue", ci.col = "red")
pacf(SieRet, main="PACF of returns", lag.max=20, ylab= " ",
xlab = " ", col = "blue", ci.col = "red")
?weekdays
library(lubridate)
total.steps.day2
unzip("activity.zip", exdir="activitymonitoringdata")
activity.base <- read.csv("activitymonitoringdata/activity.csv")
head(activity.base, 10)
```
##### 1) What is mean total number of steps taken per day?
For this part of the assignment, you can ignore the missing values in the dataset.
Calculate the total number of steps taken per day
```{r, echo=TRUE, cache=TRUE}
total.steps.day <- aggregate(. ~ date, activity.base, FUN = sum, na.rm=TRUE)
head(total.steps.day)
```
###### Make a histogram of the total number of steps taken each day
```{r, echo=TRUE}
hist(total.steps.day$steps, breaks="FD", xlab="Steps",
main = "Histogram of the total number of steps")
```
##### Calculate and report the mean and median of the total number of steps taken per day
In this case the mean is represented in the graph by a red line and the median
is represented in the graph by a dashed blue line.
```{r, echo=TRUE, cache=TRUE, warning=FALSE}
mean.steps.day <- mean(total.steps.day$steps)
median.steps.day <- median(total.steps.day$steps)
#Print mean
mean.steps.day
#Print median
median.steps.day
hist(total.steps.day$steps, breaks="FD", xlab="Steps",
main = "Histogram of the total number of steps", abline = 1000)
abline(v=mean.steps.day, col="red")
abline(v=median.steps.day, col="blue", lty="dashed")
```
##### What is the average daily activity pattern?
###### Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r, echo=TRUE, cache=TRUE}
average.steps.interval <- aggregate(. ~ interval, activity.base[ , -2], FUN = mean, na.rm=TRUE)
head(average.steps.interval)
plot(average.steps.interval$steps, type="l", xlab="5-minute interval",
ylab = "steps")
which.max(average.steps.interval$steps)
```
###### Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r, echo=TRUE, cache=TRUE}
which.max(average.steps.interval$steps)
```
##### Imputing missing values
###### Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r, echo=TRUE}
sum(is.na(activity.base))
```
###### Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. Create a new dataset that is equal to the original dataset but with the missing data filled in.
We will populate NA's with mean for each interval.
```{r}
activity.base.na <- activity.base[is.na(activity.base), ]
#merge columns
activity.base.merged <- merge(average.steps.interval, activity.base.na,
by = "interval")[ , -3]
#reorganize columns
activity.base.merged <- activity.base.merged[ , c(2, 3, 1)]
colnames(activity.base.merged) <- c("steps", "date", "interval")
activity.base.completes <- activity.base[complete.cases(activity.base), ]
#create coplete database without NA's
activity.base.no.na <- rbind(activity.base.merged, activity.base.completes)
```
###### Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r, echo=TRUE, cache=TRUE}
total.steps.day2 <- aggregate(. ~ date, activity.base.no.na, FUN = sum, na.rm=TRUE)
head(total.steps.day2)
```
```{r, echo=TRUE}
hist(total.steps.day2$steps, breaks="FD", xlab="Steps",
main = "Histogram of the total number of steps (NA's filled)")
```
```{r, echo=TRUE, cache=TRUE, warning=FALSE}
mean.steps.day2 <- mean(total.steps.day2$steps)
median.steps.day2 <- median(total.steps.day2$steps)
#Print mean
mean.steps.day2
#Print median
median.steps.day2
```
There is almost no difference between the data base containing NA's and the data base where NA's where replaced by the mean value for each interval. The impact of imputing only caused a higuer number of frequency counts. The histogram shpae, median and mean are almost the same.
```{r, echo=TRUE}
hist(total.steps.day2$steps, breaks="FD", xlab="Steps",
main = "Histogram of the total number of steps", abline = 1000)
abline(v=mean.steps.day2, col="red")
abline(v=median.steps.day2, col="blue", lty="dashed")
```
##### Are there differences in activity patterns between weekdays and weekends?
Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
```{r}
library(lubridate)
unzip("activity.zip", exdir="activitymonitoringdata")
activity.base <- read.csv("activitymonitoringdata/activity.csv")
head(activity.base, 10)
setwd("C:/Users/Godoy/Dropbox/code/R/datasciencecoursera/reproducible_research/RepData_PeerAssessment1")
unzip("activity.zip", exdir="activitymonitoringdata")
activity.base <- read.csv("activitymonitoringdata/activity.csv")
head(activity.base, 10)
total.steps.day <- aggregate(. ~ date, activity.base, FUN = sum, na.rm=TRUE)
head(total.steps.day)
hist(total.steps.day$steps, breaks="FD", xlab="Steps",
main = "Histogram of the total number of steps")
mean.steps.day <- mean(total.steps.day$steps)
median.steps.day <- median(total.steps.day$steps)
#Print mean
mean.steps.day
#Print median
median.steps.day
hist(total.steps.day$steps, breaks="FD", xlab="Steps",
main = "Histogram of the total number of steps", abline = 1000)
abline(v=mean.steps.day, col="red")
abline(v=median.steps.day, col="blue", lty="dashed")
average.steps.interval <- aggregate(. ~ interval, activity.base[ , -2], FUN = mean, na.rm=TRUE)
head(average.steps.interval)
plot(average.steps.interval$steps, type="l", xlab="5-minute interval",
ylab = "steps")
which.max(average.steps.interval$steps)
```{r, echo=TRUE}
sum(is.na(activity.base))
activity.base.na <- activity.base[is.na(activity.base), ]
activity.base.merged <- merge(average.steps.interval, activity.base.na,
by = "interval")[ , -3]
#reorganize columns
activity.base.merged <- activity.base.merged[ , c(2, 3, 1)]
colnames(activity.base.merged) <- c("steps", "date", "interval")
activity.base.completes <- activity.base[complete.cases(activity.base), ]
#create coplete database without NA's
activity.base.no.na <- rbind(activity.base.merged, activity.base.completes)
total.steps.day2 <- aggregate(. ~ date, activity.base.no.na, FUN = sum, na.rm=TRUE)
head(total.steps.day2)
```{r, echo=TRUE}
hist(total.steps.day2$steps, breaks="FD", xlab="Steps",
main = "Histogram of the total number of steps (NA's filled)")
mean.steps.day2 <- mean(total.steps.day2$steps)
median.steps.day2 <- median(total.steps.day2$steps)
#Print mean
mean.steps.day2
#Print median
median.steps.day2
hist(total.steps.day2$steps, breaks="FD", xlab="Steps",
main = "Histogram of the total number of steps", abline = 1000)
abline(v=mean.steps.day2, col="red")
abline(v=median.steps.day2, col="blue", lty="dashed")
library(lubridate)
activity.base.no.na$date <- ymd(activity.base.no.date$date)
activity.base.no.na$date <- ymd(activity.base.no.na$date)
View(activity.base.no.na)
levels(activity.base.no.na$date)
unique(activity.base.no.na$date)
sort(unique(activity.base.no.na$date))
weekdays(activity.base.no.na$date)
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
weekdays(activity.base.no.na$date)
Sys.setlocale("LC_TIME", "English")
cbind(activity.base.no.na, weekdays(activity.base.no.na$date))
activity.base.no.na <- cbind(activity.base.no.na,
weekdays(activity.base.no.na$date))
activity.base.no.na <- rbind(activity.base.merged, activity.base.completes)
activity.base.no.na$date <- ymd(activity.base.no.na$date)
activity.base.no.na <- cbind(activity.base.no.na,
day = weekdays(activity.base.no.na$date))
if (activity.base.no.na$day == c("Monday", "Tuesday") {
"hola" else
"no"}
if (activity.base.no.na$day == c("Monday", "Tuesday")) {
"hola" else
"no"}
if (activity.base.no.na$day == c("Monday", "Tuesday")) {
"hola"
} else {
"no"}
unique(activity.base.no.na$day)
cbind(unique(activity.base.no.na$day), c("Weekday", "Weekday",
"Weekend", "Weekday",
"Weekday"))
as.data.frame(cbind(unique(activity.base.no.na$day), c("Weekday", "Weekday",
"Weekend", "Weekday",
"Weekday")))
days <- as.data.frame(cbind(day = unique(activity.base.no.na$day),
type = c("Weekday", "Weekday", "Weekend",
"Weekday", "Weekend", "Weekday", "Weekday")))
merge(days, activity.base.no.na, by = "day")
days
activity.base.no.na$day <- merge(activity.base.no.na, days, by = "day")
days
unique(levels(activity.base.no.na$day))
days <- as.data.frame(cbind(day = unique(levels(activity.base.no.na$day)),
type = c("Weekday", "Weekday", "Weekend",
"Weekday", "Weekend", "Weekday", "Weekday")))
days
merge(days, activity.base.no.na, by = "day")
acti.base.no.na.fact <- merge(days, activity.base.no.na, by = "day")
View(acti.base.no.na.fact)
aggregate( . ~ type + interval, acti.base.no.na.fact, FUN = mean)
acti.base.no.na.fact.agg <- aggregate( . ~ type + interval,
acti.base.no.na.fact, FUN = mean)
acti.base.no.na.fact.agg <- aggregate( . ~ type + interval,
acti.base.no.na.fact, FUN = mean)[ , c(1, 2, 4)]
aggregate( . ~ type + interval,
acti.base.no.na.fact, FUN = mean)[ , c(1, 2, 4)]
ggplot2(acti.base.no.na.fact.agg, aes(x=interval, y=steps)) + geom_line()
library(ggplot2)
ggplot2(acti.base.no.na.fact.agg, aes(x=interval, y=steps)) + geom_line()
ggplot(acti.base.no.na.fact.agg, aes(x=interval, y=steps)) + geom_line()
ggplot(acti.base.no.na.fact.agg, aes(x=interval, y=steps)) + geom_line() +
facet_grid(. ~ type)
ggplot(acti.base.no.na.fact.agg, aes(x=interval, y=steps)) + geom_line() +
facet_grid(type ~ .)
library(lattice)
xyplot(steps ~ interval | factor(type), data=acti.base.no.na.fact.agg,
type = 'l',
main="Average Number of Steps Taken",
xlab="5-Minute Interval",
ylab="Average Number of Steps")
xyplot(interval ~ steps | factor(type), data=acti.base.no.na.fact.agg,
type = 'l',
main="Average Number of Steps Taken",
xlab="5-Minute Interval",
ylab="Average Number of Steps")
?element_text
xyplot(steps ~ interval | factor(type), data=acti.base.no.na.fact.agg,
type = 'l',
main="Average Number of Steps Taken",
xlab="5-Minute Interval",
ylab="Average Number of Steps")
xyplot(interval ~ steps | factor(type), data=acti.base.no.na.fact.agg,
type = 'l',
main="Average Number of Steps Taken",
xlab="5-Minute Interval",
ylab="Average Number of Steps")
xyplot(steps ~ interval | factor(type), data=acti.base.no.na.fact.agg,
type = 'l',
main="Average Number of Steps Taken",
xlab="5-Minute Interval",
ylab="Average Number of Steps")
ggplot(acti.base.no.na.fact.agg, aes(x=interval, y=steps)) + geom_line() +
facet_grid(type ~ .)
ggplot(acti.base.no.na.fact.agg, aes(x=interval, y=steps)) + geom_line() +
facet_grid(type ~ .) +
theme(strip.text.xi = element_text(angle=90))
ggplot(acti.base.no.na.fact.agg, aes(x=interval, y=steps)) + geom_line() +
facet_grid(type ~ .) +
theme(strip.text.x = element_text(angle=90))
ggplot(acti.base.no.na.fact.agg, aes(x=interval, y=steps)) + geom_line() +
facet_grid(type ~ .) +
theme(strip.text.y = element_text(angle=90))
element.text
?element.text
?element_text
ggplot(acti.base.no.na.fact.agg, aes(x=interval, y=steps)) + geom_line() +
facet_grid(type ~ .) +
theme(strip.text.y = element_text(hjust=1))
ggplot(acti.base.no.na.fact.agg, aes(x=interval, y=steps)) + geom_line() +
facet_wrap(type ~ .)
ggplot(acti.base.no.na.fact.agg, aes(x=interval, y=steps)) + geom_line() +
facet_wrap(type ~ ., ncol=1)
ggplot(acti.base.no.na.fact.agg, aes(x=interval, y=steps)) + geom_line() +
facet_wrap(~ type, ncol=1)
average.steps.interval <- aggregate(. ~ interval, activity.base[ , -2], FUN = mean, na.rm=TRUE)
head(average.steps.interval)
plot(average.steps.interval$steps, type="l", xlab="5-minute interval",
ylab = "steps")
ggplot(acti.base.no.na.fact.agg, aes(x=interval, y=steps)) + geom_line() +
facet_wrap(~ type, ncol=1) + ylab("Mean steps")
total.steps.day <- aggregate(. ~ date, activity.base, FUN = sum,
na.rm=TRUE)[ , -3]
head(total.steps.day)
activity.base.no.na <- rbind(activity.base.merged, activity.base.completes)[ , -3]
head(activity.base.no.na)
activity.base.no.na <- rbind(activity.base.merged, activity.base.completes)
total.steps.day2 <- aggregate(. ~ date, activity.base.no.na, FUN = sum,
na.rm=TRUE)[ , -3]
head(total.steps.day2)
knit2html("PA1_template.Rmd")
library(knitr)
knit2html("PA1_template.Rmd")
total.steps.day <- aggregate(. ~ date, activity.base, steps_sum = sum,
na.rm=TRUE)[ , -3]
knit2html("PA1_template.Rmd")
setwd("C:/Users/Godoy/Dropbox/code/R/datasciencecoursera/RepData_PeerAssessment1")
knit2html("PA1_template.Rmd")
days <- c("monday":"sunday")
days <- c(1:7)
days <- 5*c(1:7)
days
days <- rep((c(1:7), 10))
?re
?rep
?seq
?rep
days <- rep.int((c(1:7), 10))
days <- rep(c(1:7), 10)
head(days)
days
days <- as.data.frame(rep(c(1:7), 10))
days
name.days <- as.data.frame(days = unique(days), c("Monday", "Tuesday", "Wednesday"
"Thursday", "Saturday", "Sunday"))
name.days <- as.data.frame(days = unique(days),
name = c("Monday", "Tuesday", "Wednesday"
"Thursday", "Friday", "Saturday", "Sunday"))
name.days <- as.data.frame(days = unique(days),
name = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday"))
name.days <- cbind(days = unique(days),
name = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday"))
name.days
days <- as.data.frame(days = rep(c(1:7), 10))
days <- as.data.frame(rep(c(1:7), 10))
days <-as.data.frame(NULL)
days <- cbind(days = rep(c(1:7), 10))
head(days)
name.days <- cbind(days = unique(days),
name = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday"))
head(days)
head(name.days)
name.days <- as.data.frame(days = unique(days),
name = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday"))
?as.data.frame
data.frame(days = unique(days),
name = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday"))
days <- data.frame(days = rep(c(1:7), 10))
name.days <- data.frame(days = unique(days),
name = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday"))
head(days)
head(name.days)
merge(name.days, days, by = "days")
merge(days, name.days, by = "days")
days
some.days <- data.frame(days = rep(c(1:7), 10))
name.days <- data.frame(days = unique(days),
merge(some.days, name.days, by = "days")
merge(name.days, some.days, by = "days")
some.days <- data.frame(days = rep(c(1:7), 4))
name.days <- data.frame(days = unique(days),
name = c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday", "Sunday"))
merge(name.days, some.days, by = "days")
runif(300, 700, 7)
runif(7, 300, 700)
some.days <- data.frame(days = rep(c(1:7), 4),
calories = rep(runif(7, 300, 700), 4)
somedays
some.days
some.days <- data.frame(days = rep(c(1:7), 4),
calories = rep(runif(7, 300, 700), 4)
some.days <- data.frame(days = rep(c(1:7), 4),
calories = rep(runif(7, 300, 700), 4))
some.days
calories.measure <- data.frame(days = rep(c(1:7), 8),
calories = rep(runif(7, 300, 700), 8))
?runif
runif(1, 48,10)
runif(10, 1, 48)
integer(runif(10, 1, 48))
as.integer(runif(10, 1, 48))
calories.measure[2, c(as.integer(runif(10, 1, 48)))]
hola <- as.integer(runif(10, 1, 48))
calories.measure[2, c(hola)]
calories.measure[2, hola]
calories.measure[as.integer(runif(10, 1, 48)), 2]
calories.measure[as.integer(runif(10, 1, 48)), 2] <- NA
calories.measure
forgot <- as.integer(runif(10, 1, 48))
aggregate(days ~ ., calories.measure, FUN = mean, narm=TRUE)
aggregate(. ~ days, calories.measure, FUN = mean, narm=TRUE)
calories.measure[is.na(calories.measure), ]
calories.measure
calories.measure[calories = NA, ]
calories.measure["calories" = NA, ]
calories.measure[calories.measure$calories = NA, ]
calories.measure[calories.measure$calories == NA, ]
calories.measure
calories.measure[is.na(calories.measure), ]
is.na(calories.measure)
calories.measure[is.na(calories.measure$calories), ]
calories.measure.na <- calories.measure[is.na(calories.measure$calories), ]
merge(mean.calories.days, calories.measure.na, by = "days)
merge(mean.calories.days, calories.measure.na, by = "days")
mean.calories.days <- aggregate(. ~ days, calories.measure,
FUN = mean, narm=TRUE)
merge(mean.calories.days, calories.measure.na, by = "days")
merge(mean.calories.days, calories.measure.na, by = "days")[ , -3]
set.seed(11)
set.sedd(11)
calories.measure <- data.frame(days = rep(c(1:7), 8),
calories = rep(runif(7, 300, 700), 8))
forgot <- as.integer(runif(10, 1, 48))
calories.measure[forgot, 2] <- NA
head(calories.measure, 10)
mean.calories.days <- aggregate(. ~ days, calories.measure,
FUN = mean, narm=TRUE)
mean.calories.days
calories.measure.na <- calories.measure[is.na(calories.measure$calories), ]
merge(mean.calories.days, calories.measure.na, by = "days")
mean.calories.days <- aggregate(. ~ days, calories.measure,
FUN = mean, na.rm=TRUE)
mean.calories.days
rbind(complete.cases(calories.measure.na), calories.measure.no.na)
calories.measure.no.na <- merge(mean.calories.days, calories.measure.na,
by = "days")
rbind(complete.cases(calories.measure.na), calories.measure.no.na)
rbind(complete.cases(calories.measure), calories.measure.no.na)
complete.cases(calories.measure)
